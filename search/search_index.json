{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Starlite Barebones Template","text":"<p>A production-ready, minimal template for the Starlite API Framework</p>"},{"location":"#starlite-upstream-status","title":"Starlite Upstream Status","text":"<p>Key:</p> <ul> <li> <p> = Included</p> </li> <li> <p> = Not Included (Yet)</p> </li> </ul> <p>If you don't see a specific package it probably means it is not planned (Want it? Open an issue!)</p>"},{"location":"#features","title":"Features","text":"<ul> <li> Starlite API Framework plus some extras:<ul> <li><code>uvicorn</code></li> <li><code>python-dotenv</code></li> <li><code>structlog</code></li> <li><code>TailwindCSS</code></li> </ul> </li> <li>CI via GitHub Actions<ul> <li> CI Testing</li> <li> Document Generation</li> </ul> </li> <li>Development<ul> <li> <code>docker-compose</code> for local development</li> <li> GitHub Codespaces for local development</li> <li> <code>Makefile</code> with useful commands</li> <li> <code>pyproject.toml</code> for compatibility with both pip and poetry</li> <li><code>pre-commit</code> hooks<ul> <li> <code>ruff</code>, <code>pylint</code>, and <code>isort</code> configurations for compatibility with the black auto-formatter</li> <li> <code>ruff</code> for linting</li> <li> <code>black</code> for auto-formatting</li> <li> <code>isort</code> for import sorting</li> <li> <code>codespell</code> for spell checking</li> <li> <code>conventional-pre-commit</code> for commit message linting to enforce Conventional Commits</li> <li> <code>mypy</code> for static type checking</li> </ul> </li> <li>Testing and Coverage<ul> <li> Test coverage reports are generated during every commit and pull request using coverage and pytest-cov. All reports are automatically uploaded and archived on codecov.io.</li> <li> <code>pytest</code> for unit testing and <code>mypy</code> for static type checking</li> <li> <code>pytest-asyncio</code> for testing asynchronous code</li> <li> <code>pytest-cov</code> for test coverage</li> </ul> </li> <li>Documentation Management<ul> <li> <code>mkdocs</code> for documentation generation</li> <li> <code>mkdocs-material</code> for documentation theme</li> <li> <code>mkdocstrings</code> for documentation generation from docstrings</li> <li> <code>mkdocstrings-python</code> for documentation generation from Python docstrings</li> <li> Docs are automatically deployed to GitHub Pages during every release</li> </ul> </li> <li>Release Management<ul> <li> <code>bump2version</code> for automatic versioning</li> <li> <code>poetry</code> for dependency management</li> <li> Package releases to PyPI with dynamic versioning provided by bump2version begin automatically whenever a new tag is created in github.</li> <li> Metadata and dependency information is stored in the pyproject.toml for compatibility with both pip and poetry.</li> </ul> </li> </ul> </li> <li>Front End<ul> <li> <code>tailwindcss</code> for beautiful CSS</li> <li> <code>Jinja2</code> for templating</li> </ul> </li> </ul>"},{"location":"usage_guide/developer_setup/","title":"Developer Setup Guide","text":"<p>This guide will walk you through the setup of the project for development.</p>"},{"location":"usage_guide/developer_setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+</li> <li>Poetry</li> <li>Install with <code>make install</code></li> <li>Install with <code>poetry install --with dev</code></li> <li><code>precommit</code> and other development dependencies</li> <li>Run <code>poetry install --with dev</code></li> <li>Run <code>pre-commit install</code> to install the pre-commit hooks</li> </ul>"},{"location":"usage_guide/installation/","title":"Installation Guide","text":"<p>This guide will walk you through the steps to install and run the project locally. This project includes a <code>Makefile</code> with some useful commands (available by running <code>make help</code>)</p>"},{"location":"usage_guide/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+</li> <li>Poetry</li> <li>Install with <code>make install</code></li> </ul>"},{"location":"usage_guide/installation/#getting-started","title":"Getting Started","text":"<ul> <li>Run <code>poetry install</code></li> <li>Run <code>uvicorn app.asgi:app --reload</code> to start the app.</li> </ul>"},{"location":"usage_guide/releases/","title":"Release Guide","text":"<p>This guide will walk you through the steps to release a new version of the project.</p>"},{"location":"usage_guide/releases/#prerequisites","title":"Prerequisites","text":"<ul> <li> Ensure you have the latest version of the <code>main</code> branch</li> </ul>"},{"location":"usage_guide/releases/#steps","title":"Steps","text":"<ul> <li> Run <code>make pre-release</code> to bump the version, build the docs, and clean up stale files</li> <li> Draft a new release on GitHub, using the version number as the tag</li> <li> Update the <code>CHANGELOG.md</code> file with the release notes</li> <li> Commit the changes to <code>main</code> and push them to GitHub</li> <li> Publish the release on GitHub</li> <li> Ensure the GitHub Actions workflow for <code>release</code> has completed successfully</li> </ul>"},{"location":"usage_guide/workflows/","title":"Workflow Guide","text":"<p>This guide will walk you through the workflow of the project.</p>"},{"location":"usage_guide/workflows/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+</li> <li>Poetry</li> <li>Install with <code>make install</code></li> <li><code>precommit</code> and other development dependencies</li> <li>Run <code>poetry install --with dev</code></li> <li>Run <code>pre-commit install</code> to install the pre-commit hooks</li> </ul>"},{"location":"usage_guide/workflows/#development","title":"Development","text":"<ul> <li>Make commands are available by running <code>make help</code></li> <li>Run <code>make install</code> to install the project in development mode</li> <li>Run <code>make build</code> to build the project</li> <li>Run <code>make test</code> to run the tests</li> <li>Run <code>make coverage</code> to run the tests with coverage</li> <li>Run <code>make lint</code> to run linting</li> <li>Run <code>make pre-release</code> to run the pre-release cycle</li> <li>Run <code>make upgrade</code> to upgrade all dependencies to the latest stable versions</li> <li>Change Lifecycle:</li> <li>Create a new branch</li> <li>Make and commit changes</li> <li>The pre-commit hooks will run automatically</li> <li>Push the changes to the remote branch</li> <li>Create a pull request</li> <li>The CI will run automatically</li> <li>Merge the pull request after the CI passes and the PR is approved</li> <li>Delete the branch</li> </ul>"},{"location":"usage_guide/workflows/#documentation","title":"Documentation","text":"<ul> <li>Ensure you have the <code>docs</code> dependencies installed</li> <li>Run <code>poetry install --with docs</code></li> <li>Run <code>make docs</code> to build the docs or <code>make docs-serve</code> to build and serve them locally</li> <li>Run <code>make docs-clean</code> to clean the static doc files</li> <li>Run <code>make docs-serve</code> to serve the docs locally</li> </ul>"},{"location":"usage_guide/workflows/#production","title":"Production","text":"<ul> <li>Run <code>make runtime-only</code> to install the project in production mode</li> <li>Run <code>make migrations</code> to run the migrations</li> <li>Run <code>make migrate</code> to migrate the database</li> <li>Run <code>make squash-migrations</code> to squash the migrations</li> <li>Run <code>make clean</code> to clean the project</li> <li>Run <code>make docs</code> to build the docs or <code>make docs-serve</code> to build and serve them locally</li> </ul>"}]}